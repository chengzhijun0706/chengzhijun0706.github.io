<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chengzhijun0706.github.io/</id>
    <title>lift</title>
    <updated>2019-10-16T09:35:28.397Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chengzhijun0706.github.io/"/>
    <link rel="self" href="https://chengzhijun0706.github.io//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://chengzhijun0706.github.io//images/avatar.png</logo>
    <icon>https://chengzhijun0706.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, lift</rights>
    <entry>
        <title type="html"><![CDATA[Android版本适配]]></title>
        <id>https://chengzhijun0706.github.io//post/android-ban-ben-gua-pei</id>
        <link href="https://chengzhijun0706.github.io//post/android-ban-ben-gua-pei">
        </link>
        <updated>2019-10-09T08:07:28.000Z</updated>
        <summary type="html"><![CDATA[<p>不得不知的Android版本适配，本文讲述将讲述从6.0到10的所有适配规则</p>
]]></summary>
        <content type="html"><![CDATA[<p>不得不知的Android版本适配，本文讲述将讲述从6.0到10的所有适配规则</p>
<!-- more -->
<p><strong>6.0</strong></p>
<ul>
<li>
<p>Android6.0的动态权限介绍
因为Android6.0（API23）开始需要动态申请权限，需要手动申请的权限有8组（短信、电话、联系人、存储、位置、麦克风、日历、相机），共24个，如下所示：</p>
<pre><code>  短信	SEND_SMS、RECEIVE_SMS、READ_SMS、RECEIVE_WAP_PUSH、RECEIVE_MMS	
  电话	READ_PHONE_STATE、CALL_PHONE、READ_CALL_LOG、WRITE_CALL_LOG、ADD_VOICEMAIL、USE_SIP、PROCESS_OUTGOING_CALLS
  联系人	READ_CONTACTS、WRITE_CONTACTS、GET_ACCOUNTS
  存储	READ_EXTERNAL_STORAGE、WRITE_EXTERNAL_STORAGE	
  位置	ACCESS_FINE_LOCATION、ACCESS_COARSE_LOCATION
  麦克风	RECORD_AUDIO
  日历	READ_CALENDAR、WRITE_CALENDAR
  相机	CAMERA
  传感器	BODY_SENSORS
</code></pre>
<p>注意：如果应用程序请求在AndroidManifest中列出的危险权限，并且应用程序已经在同一权限组中具有另一个危险权限，系统会立即授予权限，而不会与用户进行任何交互。
例如，如果一个应用程序先前已经请求并被授予READ_CONTACTS权限，然后它请求WRITE_CONTACTS(同属于联系人一组)，系统会立即授予该权限，不会再弹出权限授予询问的对话框。</p>
</li>
<li>
<p>Android6.0如何申请动态权限
开发中经常会遇到拍照的权限申请，这里就讲一下如何动态设置拍照权限：</p>
<p><img src="https://chengzhijun0706.github.io//post-images/1570611986822.png" alt=""></p>
</li>
</ul>
<p><strong>7.0</strong></p>
<ul>
<li>
<p>应用间共享文件限制
在Android 7.0系统上，Android框架强制执行了StrictMode API政策禁止向应用外公开file://URI，如果一项包含文件file://URI类型的的Intent离开你的应用，即调用Uri.from(file)传递文件路径给第三方应用，会出现FileUriExposedException异常，如调用系统相机拍照、裁切照片、打开APK安装界面等。
如果要 在应用间共享文件，可以发送content://URI类型的Uri，并授予URI临时访问权限，进行此授权的最简单方式是使用FileProvider类。</p>
<p>步骤如下：</p>
<ol>
<li>
<p>在AndroidManiest.xml清单中注册provider</p>
<pre><code> &lt;provider
 	android:name=&quot;android.support.v4.content.FileProvider&quot;
 	android:authorities=&quot;com.demo.main.provider&quot;
 	android:exported=&quot;false&quot;
 	android:grantUriPermissions=&quot;true&quot;&gt;
 	&lt;meta-data
 			android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;
 			android:resource=&quot;@xml/file_provider_paths&quot;/&gt;
 &lt;/provider&gt;
 exported为false，grantUriPermissions表示授予URI临时访问权限。
</code></pre>
</li>
<li>
<p>指定共享目录
上文中的android:resource=&quot;@xml/file_provider_paths&quot;指定了共享的目录，其配置如下：</p>
<pre><code> &lt;paths xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
 	&lt;files-path name=&quot;my_images&quot; path=&quot;images/&quot;/&gt;
 	...
 &lt;/paths&gt;

 路径说明：

 &lt;files-path name=&quot;name&quot; path=&quot;path/&quot; /&gt;   
 &lt;!--等同于Context.getFilesDir()下面的path文件夹的所有文件--&gt; 

 &lt;cache-path name=&quot;name&quot; path=&quot;path/&quot; /&gt;  
 &lt;!--等同于Context.getCacheDir()下面的path文件夹--&gt; 

 &lt;external-path name=&quot;name&quot; path=&quot;path/&quot; /&gt; 
 &lt;!--等同于Environment.getExternalStorageDirectory()下面的path文件夹--&gt; 

 &lt;external-files-path name=&quot;name&quot; path=&quot;path/&quot; /&gt; 
 &lt;!--等同于 Context#getExternalFilesDir(String)下面子文件path文件夹--&gt; 

 &lt;external-cache-path name=&quot;name&quot; path=&quot;path/&quot; /&gt; 
 &lt;!--相当于 Context.getExternalCacheDir()下边的path文件夹--&gt; 
</code></pre>
</li>
<li>
<p>通过FileProvider，下面是打开下载完的APK的实例</p>
<pre><code> 	public static Intent getOpenFileIntent(Context context, DownloadResponse downloadResponse) {
 		File file = new File(downloadResponse.getParentPath(), downloadResponse.getFileName());
 		if (!file.exists()) {
 				return null;
 		}
 		Intent intent = new Intent();
 		intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
 		intent.setAction(Intent.ACTION_VIEW);
 		if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) {
 				intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
 				Uri contentUri = FileProvider.getUriForFile(context, &quot;com.demo.main.provider&quot;, file);
 				intent.setDataAndType(contentUri, downloadResponse.getMimeType());
 		} else {
 				intent.setDataAndType(Uri.fromFile(file), downloadResponse.getMimeType());
 		}
 		if (!(context instanceof Activity)) {
 				intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
 		}
 		return intent;
 	}
</code></pre>
</li>
</ol>
</li>
<li>
<p>系统广播删除</p>
<ul>
<li>Android N关闭了三项系统广播：网络状态变更广播、拍照广播及录像广播。
只有在通过 动态注册 的方式才能收到网络变化的广播，在AndroidManifest.xml中静态的注册的无法收到。</li>
</ul>
</li>
</ul>
<p><strong>8.0</strong></p>
<ul>
<li>通知渠道
<ul>
<li>
<p>在Android 8.0中所有的通知都需要提供通知渠道，否则，所有通知在8.0系统上都不能正常显示。</p>
<pre><code>  DownloadNotifier(Context context) {
  		mContext = context;
  		mManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
  		if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {
  				final NotificationChannel channel = new NotificationChannel(CHANNEL_ID,CHANNEL_NAME,NotificationManager.IMPORTANCE_HIGH);
  				mManager.createNotificationChannel(channel);
  		}
  }
</code></pre>
</li>
</ul>
</li>
<li>悬浮窗
<ul>
<li>8.0中新增了一种悬浮窗的窗口类型，TYPE_APPLICATION_OVERLAY，如果应用使用SYSTEM_ALERT_WINDOW权限并且尝试使用以下窗口类型之一在其它应用和系统窗口上方显示提醒窗口，都会显示在TYPE_APPLICATION_OVERLAY窗口类型的下方。如果该应用的targetSdkVersion &gt;= 26，则应用只能使用TYPE_APPLICATION_OVERLAY窗口类型来创建悬浮窗。
<ul>
<li>TYPE_PHONE</li>
<li>TYPE_PRIORITY_PHONE</li>
<li>TYPE_SYSTEM_ALERT</li>
<li>TYPE_SYSTEM_OVERLAY</li>
<li>TYPE_SYSTEM_ERROR</li>
<li>TYPE_TOAST</li>
</ul>
</li>
</ul>
</li>
<li>透明窗口不允许锁定屏幕旋转
<ul>
<li>
<p>窗口透明 + 固定屏幕方向 会抛出下面的异常：</p>
<pre><code>  Caused by: java.lang.IllegalStateException: Only fullscreen opaque activities can request orientation
</code></pre>
</li>
<li>
<p>解决方案有两种：</p>
<ul>
<li>适配横屏，去掉固定屏幕方向的限制。</li>
<li>动态设置窗口透明。</li>
</ul>
</li>
<li>
<p>示例</p>
<ul>
<li>绝大多数都是因为我们为了提高用户体验，手动取消App启动白屏或者黑屏的时候，将Splash界面设为了透明，然后这个时候又设置了方向为垂直，从而导致了这个问题。</li>
<li>解决方法
<ul>
<li>
<p>找到你设置透明的Activity，然后在他的theme中将android:windowIsTranslucent改为false</p>
<pre><code>  &lt;item name=&quot;android:windowIsTranslucent&quot;&gt;false&lt;/item&gt;
</code></pre>
</li>
<li>
<p>再加入下面这行代码就搞定了。</p>
<pre><code>  &lt;item name=&quot;android:windowDisablePreview&quot;&gt;true&lt;/item&gt;
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>安装apk权限
<ul>
<li>
<p>在 Android 8.0 中，安装未知应用权限提高了安装未知来源应用时的安全性。此权限与其他运行时权限一样，会与应用绑定，在安装时进行提示，确保用户授予使用安装来源的权限后，此权限才会提示用户安装应用。在运行 Android 8.0 或更高版本的设备上使用此权限时，恶意下载程序将无法骗取用户安装未获得预先授权的应用，所以我们需要加入安装apk文件的权限。</p>
<pre><code>   &lt;uses-permission android:name=&quot;android.permission.REQUEST_INSTALL_PACKAGES&quot; /&gt;
</code></pre>
</li>
</ul>
</li>
<li>后台服务限制
<ul>
<li>针对 Android 8.0 的应用尝试在不允许其创建后台服务的情况下使用 startService()函数，则该函数将引发一个 IllegalStateException。</li>
<li>解决方案
<ul>
<li>Job Scheduler</li>
<li>Foreground Service</li>
<li>try catch</li>
</ul>
</li>
</ul>
</li>
<li>权限组
<ul>
<li>Android O 之前，申请一个子权限(如写外部存储权限)，会自动获取权限组中其他子权限（读外部存储权限）。组内其他子权限可以直接使用，无需申请。Android O 修复了这个错误。</li>
<li>在 Android O 上，申请一个子权限，组内其他子权限不会自动获取，需要再次申请才能使用。但不会弹出系统的权限申请框，将被自动批准。</li>
</ul>
</li>
</ul>
<p><strong>9.0</strong></p>
<ul>
<li>明文流量的网络请求
<ul>
<li>Android 9.0限制了明文流量的网络请求，非加密的流量请求都会被系统禁止。简而言之限制HTTP请求，强制HTTPS，使用如下配置关闭限制
<ul>
<li>
<p>在res/xml文件夹下新建network_security_config.xml：</p>
<pre><code>  &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
  &lt;network-security-config&gt;
  		&lt;base-config cleartextTrafficPermitted=&quot;true&quot; /&gt;
  &lt;/network-security-config&gt;
</code></pre>
</li>
<li>
<p>在AndroidManifest.xml的application标签下进行配置：</p>
<pre><code>  &lt;application
  	android:networkSecurityConfig=&quot;@xml/network_security_config&quot;&gt;
  &lt;/application&gt;
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li>Apache HTTP客户端弃用（org.apache.http包下类找不到）
<ul>
<li>
<p>在 Android 6.0 中，谷歌取消了对 Apache HTTP 客户端的支持。 从 Android 9 开始，默认情况下该内容库已从 bootclasspath 中移除且不可用于应用。</p>
</li>
<li>
<p>9.0下使用org.apache.http包下类会抛如下异常：</p>
<pre><code>  java.lang.NoClassDefFoundError: Failed resolution of: Lorg/apache/http/...
</code></pre>
</li>
<li>
<p>解决方案</p>
<ul>
<li>
<p>在AndroidManifest.xml的application标签下进行配置：</p>
<pre><code>  &lt;uses-library
  	android:name=&quot;org.apache.http.legacy&quot;
  	android:required=&quot;false&quot; /&gt;
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li>webview数据目录变更
<ul>
<li>
<p>如果在api设置为28后，多进程使用同一个目录webView则会抛出异常：</p>
<pre><code>  Caused by: java.lang.RuntimeException: Using WebView from more than one process at once with the same data directory is not supported. 
</code></pre>
</li>
<li>
<p>解决方案：为不同的进程设置不同的webview数据目录</p>
<pre><code>  if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.P) {
  	String processName = getProcessName(this);
  	if (!&quot;com.xx.xxx&quot;.equals(processName)){//判断不等于默认进程名称
  		WebView.setDataDirectorySuffix(processName);}
  }
  public  String getProcessName(Context context) {
  		if (context == null) return null;
  			ActivityManager manager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
  			for (ActivityManager.RunningAppProcessInfo processInfo : manager.getRunningAppProcesses()) {
  				if (processInfo.pid == android.os.Process.myPid()) {
  						return processInfo.processName;
  				}
  		}
  		return null;
  }
</code></pre>
</li>
</ul>
</li>
<li>非sdk接口管控
<ul>
<li>非SDK接口限制就是某些SDK中的私用方法，如private方法，你通过Java反射等方法获取并调用了。那么这些调用将在target&gt;=P或target&gt;=Q的设备上被限制使用，当你使用了这些方法后，会报错。</li>
<li>使用官方检查器veridex用来检测一个apk中哪里使用了非SDK接口。
<ul>
<li>greylist: 灰名单，即当前版本仍能使用的非SDK接口，但在下一版本中可能变成被限制的非SDK接口</li>
<li>blacklist：黑名单，使用了就会报错。也是我们项目中必须解决的非SDK接口</li>
<li>greylist-max-o： 在targetSDK&lt;=O中能使用，但是在targetSDK&gt;=P中被限制的非SDK接口</li>
<li>greylist-max-p： 在targetSDK&lt;=P中能使用，但是在targetSDK&gt;=Q中被限制的非SDK接口</li>
</ul>
</li>
</ul>
</li>
<li>前台服务
<ul>
<li>针对 Android 9 或更高版本并使用前台服务的应用需要请求FOREGROUND_SERVICE权限，系统会自动为请求权限的应用授予此权限。如果针对 Android 9 或更高版本的应用尝试创建一个前台服务且未请求 FOREGROUND_SERVICE，则系统会引发 SecurityException。</li>
</ul>
</li>
</ul>
<p><strong>10.0</strong></p>
<ul>
<li>存储权限
<ul>
<li>Android Q 在外部存储设备中为每个应用提供了一个“隔离存储沙盒”（例如 /sdcard）。任何其他应用都无法直接访问您应用的沙盒文件。由于文件是您应用的私有文件，因此您不再需要任何权限即可在外部存储设备中访问和保存自己的文件。此变更可让您更轻松地保证用户文件的隐私性，并有助于减少应用所需的权限数量。</li>
<li>沙盒，简单而言就是应用专属文件夹，并且访问这个文件夹无需权限。谷歌官方推荐应用在沙盒内存储文件的地址为Context.getExternalFilesDir()下的文件夹。比如要存储一张图片,则应放在Context.getExternalFilesDir(Environment.DIRECTORY_PICTURES)中。</li>
<li>以下将按访问的目标文件的地址介绍如何适配。
<ul>
<li>访问自己文件：无需特定权限，应用即可访问自己沙盒中的文件。</li>
<li>访问系统下载文件：对于系统下载文件夹的访问，暂时没做限制，但是，要访问其中其他应用的文件，必须允许用户使用系统的文件选择器应用来选择文件。</li>
<li>访问其他应用创建的文件，这些文件位于以下其中一个明确定义的媒体集合中：
<ul>
<li>照片：存储在 MediaStore.Images 中。</li>
<li>视频：存储在 MediaStore.Video 中。</li>
<li>音频：存储在 MediaStore.Audio 中。</li>
<li>要访问此类文件，应用必须使用 MediaStore，并调用 openFile() 等方法。</li>
</ul>
</li>
<li>媒体相关数据限制
<ul>
<li>除非您的应用已获得 ACCESS_MEDIA_LOCATION 权限，否则图片文件中的 Exif 元数据会被遮盖。媒体存储器中每个文件的 DATA 列都会被遮盖。
MediaStore.Files 表格会自行过滤，仅显示照片、视频和音频文件。例如，该表格不会再显示 PDF 文件。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>定位权限
<ul>
<li>与iOS系统一样，Q中也加入了后台位置权限ACCESS_BACKGROUND_LOCATION，如果应用需要在后台时也获得用户位置(比如滴滴)，就需要动态申请ACCESS_BACKGROUND_LOCATION权限。当然如果不需要的话，应用就无需任何改动，且谷歌会按照应用的targetSDK作出不同处理：
<ul>
<li>targetSDK &lt;= P 应用如果请求了ACCESS_FINE_LOCATION 或 ACCESS_COARSE_LOCATION权限，Q设备会自动帮你申请ACCESS_BACKGROUND_LOCATION权限。</li>
</ul>
</li>
</ul>
</li>
<li>设备唯一标识符
<ul>
<li>原来的READ_PHONE_STATE权限已经不能获得IMEI和序列号，如果想在Q设备上获得设备ID，会返回空值(targetSDK&lt;=P)或者报错(targetSDK==Q)。且官方所说的READ_PRIVILEGED_PHONE_STATE权限只提供给系统app，所以这个方法算是废了。</li>
</ul>
</li>
<li>minSDK警告
<ul>
<li>在 Android Q 中，当用户首次运行以 Android 6.0（API 级别 23）以下的版本为目标平台的任何应用时，Android平台会向用户发出警告。如果此应用要求用户授予权限，则系统会先向用户提供调整应用权限的机会，然后才会允许此应用首次运行。</li>
<li>谷歌要求运行在Q设备上的应用targetSDK&gt;=23,不然会向用户发出警告。</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git命令速查]]></title>
        <id>https://chengzhijun0706.github.io//post/git-ming-ling-su-cha</id>
        <link href="https://chengzhijun0706.github.io//post/git-ming-ling-su-cha">
        </link>
        <updated>2019-06-18T03:19:28.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  不可不看的<strong>Git</strong>命令小全！<br>
✍️  本文收集整理了一些日常项目使用到的各种<strong>Git</strong>的奇技淫巧</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  不可不看的<strong>Git</strong>命令小全！<br>
✍️  本文收集整理了一些日常项目使用到的各种<strong>Git</strong>的奇技淫巧</p>
<!-- more -->
<ul>
<li>
<p><strong>新建代码库</strong></p>
<ul>
<li>
<h4 id="git-init在当前目录新建一个git代码库"><code>git init</code>在当前目录新建一个Git代码库</h4>
</li>
<li>
<h4 id="git-init-project-name新建一个目录将其初始化为git代码库"><code>git init [project-name]</code>新建一个目录，将其初始化为Git代码库</h4>
</li>
<li>
<h4 id="git-clone-url下载一个项目和它的整个代码历史"><code>git clone [url]</code>下载一个项目和它的整个代码历史</h4>
</li>
</ul>
</li>
<li>
<p><strong>配置</strong>
Git 的配置文件为. gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<ul>
<li>
<h4 id="git-config-list显示当前的git配置"><code>git config --list</code>显示当前的Git配置</h4>
</li>
<li>
<h4 id="git-config-e-global编辑git配置文件"><code>git config -e [--global]</code>编辑Git配置文件</h4>
</li>
<li>
<h4 id="git-config-global-username-name设置提交代码时的用户信息"><code>git config [--global] user.name &quot;[name]&quot;</code>设置提交代码时的用户信息</h4>
</li>
<li>
<h4 id="git-config-global-useremail-email-address"><code>git config [--global] user.email &quot;[email address]&quot;</code></h4>
</li>
</ul>
</li>
<li>
<p><strong>同步</strong></p>
<ul>
<li>
<h4 id="git-remote-add-origin-url添加远程仓库地址"><code>git remote add origin [url]</code>添加远程仓库地址</h4>
</li>
<li>
<h4 id="git-remote-show-origin显示远程库origin里的资源"><code>git remote show origin</code>显示远程库origin里的资源</h4>
</li>
<li>
<h4 id="git-pull本地与服务器端同步"><code>git pull</code>本地与服务器端同步</h4>
</li>
<li>
<h4 id="git-pull-origin-branch-name将远程库的分支与当前库的分支同步"><code>git pull origin [branch-name]</code>将远程库的分支与当前库的分支同步</h4>
</li>
<li>
<h4 id="git-pull-rebase将当前的修改应用到最新的commit上变基"><code>git pull --rebase</code>将当前的修改应用到最新的commit上（变基）</h4>
</li>
<li>
<h4 id="git-push-origin-branch-name-将本地项目给提交到服务器中"><code>git push origin [branch-name]</code> 将本地项目给提交到服务器中</h4>
</li>
<li>
<h4 id="git-push-u-origin-branch-name将本地分支推送到远程分支"><code>git push -u origin [branch-name]</code>将本地分支推送到远程分支</h4>
</li>
<li>
<h4 id="git-push-origin-delete-branch-name删除远程分支"><code>git push origin --delete [branch-name]</code>删除远程分支</h4>
</li>
<li>
<h4 id="git-push-remote-f强制推送使用本地分支内容覆盖远程分支"><code>git push [remote] -f</code>强制推送，使用本地分支内容覆盖远程分支</h4>
</li>
<li>
<h4 id="git-push-remote-all推送所有分支到远程仓库"><code>git push [remote] --all</code>推送所有分支到远程仓库</h4>
</li>
<li>
<h4 id="git-push-remote-tag提交指定tag"><code>git push [remote] [tag]</code>提交指定tag</h4>
</li>
<li>
<h4 id="git-push-remote-tags提交所有tag"><code>git push [remote] --tags</code>提交所有tag</h4>
</li>
<li>
<h4 id="git-push-origin-refstagstagname删除远程tag"><code>git push origin :refs/tags/[tagName]</code>删除远程tag</h4>
</li>
</ul>
</li>
</ul>
<p><img src="https://chengzhijun0706.github.io//post-images/1560844646650.png" alt=""></p>
<ul>
<li>
<p><strong>add</strong></p>
<ul>
<li>
<h4 id="git-add-file1-file2-添加指定文件到暂存区"><code>git add [file1] [file2] ...</code>添加指定文件到暂存区</h4>
</li>
<li>
<h4 id="git-add-添加当前目录的所有文件到暂存区"><code>git add .</code>添加当前目录的所有文件到暂存区</h4>
</li>
<li>
<h4 id="git-add-p对于同一个文件的多处变化可以实现分次提交"><code>git add -p</code>对于同一个文件的多处变化，可以实现分次提交</h4>
</li>
</ul>
<pre><code>y - 存储这个hunk 
n - 不存储这个hunk 
q - 离开，不存储这个hunk和其他hunk 
a - 存储这个hunk和这个文件后面的hunk 
d - 不存储这个hunk和这个文件后面的hunk 
g - 选择一个hunk 
/ - 通过正则查找hunk 
j - 不确定是否存储这个hunk，看下一个不确定的hunk 
J - 不确定是否存储这个hunk，看下一个hunk 
k - 不确定是否存储这个hunk，看上一个不确定的hunk 
K -不确定是否存储这个hunk，看上一个hunk 
s - 把当前的hunk分成更小的hunks 
e - 手动编辑当前的hunk 
? - 输出帮助信息
</code></pre>
</li>
<li>
<p><strong>remove</strong></p>
<ul>
<li>
<h4 id="git-rm-file1-file2-删除工作区文件并且将这次删除放入暂存区"><code>git rm [file1] [file2] ...</code>删除工作区文件，并且将这次删除放入暂存区</h4>
</li>
<li>
<h4 id="git-rm-cached-file停止追踪指定文件但该文件会保留在工作区"><code>git rm --cached [file]</code>停止追踪指定文件，但该文件会保留在工作区</h4>
</li>
<li>
<h4 id="git-mv-file-original-file-renamed改名文件并且将这个改名放入暂存区"><code>git mv [file-original] [file-renamed]</code>改名文件，并且将这个改名放入暂存区</h4>
</li>
</ul>
</li>
<li>
<p><strong>commit</strong></p>
<ul>
<li>
<h4 id="git-commit-m-message提交暂存区到仓库区"><code>git commit -m [message]</code>提交暂存区到仓库区</h4>
</li>
<li>
<h4 id="git-commit-file1-file2-m-message提交暂存区的指定文件到仓库区"><code>git commit [file1] [file2] ... -m [message]</code>提交暂存区的指定文件到仓库区</h4>
</li>
<li>
<h4 id="git-commit-a提交工作区自上次commit之后的变化直接到仓库区"><code>git commit -a</code>提交工作区自上次commit之后的变化，直接到仓库区</h4>
</li>
<li>
<h4 id="git-commit-v提交时显示所有diff信息"><code>git commit -v</code>提交时显示所有diff信息</h4>
</li>
<li>
<h4 id="git-commit-amend-m-message追加上一次的提交或者用来改写上一次commit的提交信息"><code>git commit --amend -m [message]</code>追加上一次的提交，或者用来改写上一次commit的提交信息</h4>
</li>
</ul>
</li>
<li>
<p><strong>checkout</strong></p>
<ul>
<li>
<h4 id="git-checkout-file撤销对指定文件的修改"><code>git checkout [file]</code>撤销对指定文件的修改</h4>
</li>
<li>
<h4 id="git-checkout-commit-file恢复某个commit的指定文件到暂存区"><code>git checkout [commit] [file]</code>恢复某个commit的指定文件到暂存区</h4>
</li>
<li>
<h4 id="git-checkout-撤销所有工作区的所有修改"><code>git checkout .</code>撤销所有工作区的所有修改</h4>
</li>
<li>
<h4 id="git-checkout-js撤销符合正则的文件的修改"><code>git checkout &quot;*.js&quot;</code>撤销符合正则的文件的修改</h4>
</li>
<li>
<h4 id="git-checkout-b-branch新建一个分支并切换到该分支"><code>git checkout -b [branch]</code>新建一个分支，并切换到该分支</h4>
</li>
<li>
<h4 id="git-checkout-branch-name切换到指定分支并更新工作区"><code>git checkout [branch-name]</code>切换到指定分支，并更新工作区</h4>
</li>
<li>
<h4 id="git-checkout-切换到上一个分支"><code>git checkout -</code>切换到上一个分支</h4>
</li>
<li>
<h4 id="git-checkout-b-branch-tag新建一个分支指向某个tag"><code>git checkout -b [branch] [tag]</code>新建一个分支，指向某个tag</h4>
</li>
</ul>
</li>
<li>
<p><strong>reset</strong></p>
<ul>
<li>
<h4 id="git-reset-file将暂存区的指定文件恢复到工作区"><code>git reset [file]</code>将暂存区的指定文件恢复到工作区</h4>
</li>
<li>
<h4 id="git-reset-hard-file将暂存区的指定文件修改丢弃"><code>git reset --hard [file]</code>将暂存区的指定文件修改丢弃</h4>
</li>
<li>
<h4 id="git-reset-soft-commit重置当前分支的指针为指定commit同时将暂存区的内容恢复到工作区"><code>git reset --soft [commit]</code>重置当前分支的指针为指定commit，同时将暂存区的内容恢复到工作区</h4>
</li>
<li>
<h4 id="git-reset-hard-commit重置当前分支的指针为指定commit同时将会清空暂存区和工作区"><code>git reset --hard [commit]</code>重置当前分支的指针为指定commit，同时将会清空暂存区和工作区</h4>
</li>
<li>
<h4 id="git-reset-keep-commit重置当前head为指定commit但保持暂存区和工作区不变"><code>git reset --keep [commit]</code>重置当前HEAD为指定commit，但保持暂存区和工作区不变</h4>
</li>
</ul>
</li>
<li>
<p><strong>revert</strong></p>
<ul>
<li>
<h4 id="git-revert-commit将指定commit进行反提交就是将当前提交代码抹除同时生成一条新的commit-️注意如果revert多条commit时一定要注意多条之间的依赖关系"><code>git revert [commit]</code>将指定commit进行反提交（就是将当前提交代码抹除），同时生成一条新的commit。⚠️注意，如果revert多条commit时，一定要注意，多条之间的依赖关系</h4>
</li>
</ul>
</li>
<li>
<p><strong>stash</strong></p>
<ul>
<li>
<h4 id="git-stash将当前的暂存区和工作区的所有内容缓存起来如果是新增的文件需要add进暂存区才能被缓存"><code>git stash</code>将当前的暂存区和工作区的所有内容缓存起来，如果是新增的文件，需要add进暂存区才能被缓存</h4>
</li>
<li>
<h4 id="git-stash-list查看缓存记录列表"><code>git stash list</code>查看缓存记录列表</h4>
</li>
<li>
<h4 id="git-stash-apply-commit-将最后一次缓存或指定commit恢复到暂存区和工作区但是并不会删除缓存记录"><code>git stash apply [commit]</code> 将最后一次缓存或指定commit恢复到暂存区和工作区，但是并不会删除缓存记录</h4>
</li>
<li>
<h4 id="git-stash-drop-commit-将最后一条或指定commit缓存记录删除"><code>git stash drop [commit]</code> 将最后一条或指定commit缓存记录删除</h4>
</li>
<li>
<h4 id="git-stash-pop-commit-将最后一次或指定commit缓存恢复到暂存区和工作区并且删除记录"><code>git stash pop [commit]</code> 将最后一次或指定commit缓存恢复到暂存区和工作区，并且删除记录</h4>
</li>
</ul>
</li>
<li>
<p><strong>cherry</strong></p>
<h4 id="git-cherry-v-upstream-head-limit"><code>git cherry [-v] [&lt;upstream&gt; [&lt;head&gt; [&lt;limit&gt;]]]</code></h4>
<h4 id="查看当前分支及远程upstream之间commits的区别给出是否applied">查看当前分支及远程upstream之间commits的区别，给出是否applied</h4>
<h4 id="输出结果为在limit和head区间内的所有commits的sha-1列表">输出结果为在<limit>和<head>区间内的所有commits的SHA-1列表</h4>
<h4 id="其中前缀-表示upstream中已apply">其中前缀-表示<upstream>中已apply</h4>
<h4 id="其中前缀表示upstream中未apply">其中前缀+表示<upstream>中未apply</h4>
</li>
<li>
<p><strong>cherry-pick</strong></p>
<ul>
<li>
<h4 id="git-cherry-pick-commit"><code>git cherry-pick [commit]…</code></h4>
</li>
<li>
<h4 id="git-cherry-pick-x-commit-表示保留原提交的作者信息进行提交"><code>git cherry-pick -x [commit]…</code> 表示保留原提交的作者信息进行提交。</h4>
</li>
<li>
<h4 id="git-cherry-pick-edit-commit编辑commit-message"><code>git cherry-pick --edit [commit]…</code>编辑commit message</h4>
</li>
<li>
<h4 id="git-cherry-pick-n-no-commit-commit只是在当前分支上apply这些commits的改变但是不提交到当前分支"><code>git cherry-pick -n(--no-commit) [commit]…</code>只是在当前分支上apply这些commits的改变，但是不提交到当前分支</h4>
</li>
</ul>
</li>
<li>
<p><strong>status</strong></p>
<ul>
<li>
<h4 id="git-status显示暂存区和工作区的修改"><code>git status</code>显示暂存区和工作区的修改</h4>
</li>
<li>
<h4 id="git-status-s以简短的形式输出修改信息"><code>git status -s</code>以简短的形式输出修改信息</h4>
</li>
</ul>
</li>
<li>
<p><strong>branch</strong></p>
<ul>
<li>
<h4 id="git-branch列出所有本地分支"><code>git branch</code>列出所有本地分支</h4>
</li>
<li>
<h4 id="git-branch-r列出所有远程分支"><code>git branch -r</code>列出所有远程分支</h4>
</li>
<li>
<h4 id="git-branch-a列出所有本地分支和远程分支"><code>git branch -a</code>列出所有本地分支和远程分支</h4>
</li>
<li>
<h4 id="git-branch-branch-name新建一个分支但依然停留在当前分支"><code>git branch [branch-name]</code>新建一个分支，但依然停留在当前分支</h4>
</li>
<li>
<h4 id="git-branch-branch-commit新建一个分支指向指定commit"><code>git branch [branch] [commit]</code>新建一个分支，指向指定commit</h4>
</li>
<li>
<h4 id="git-branch-track-branch-remote-branch新建一个分支与指定的远程分支建立追踪关系"><code>git branch --track [branch] [remote-branch]</code>新建一个分支，与指定的远程分支建立追踪关系</h4>
</li>
<li>
<h4 id="git-branch-set-upstream-branch-remote-branch将本地分支和远程分支关联"><code>git branch --set-upstream [branch] [remote-branch]</code>将本地分支和远程分支关联</h4>
</li>
<li>
<h4 id="git-merge-branch合并指定分支到当前分支"><code>git merge [branch]</code>合并指定分支到当前分支</h4>
</li>
<li>
<h4 id="git-branch-d-branch-name删除分支"><code>git branch -d [branch-name]</code>删除分支</h4>
</li>
<li>
<h4 id="git-branch-dr-remotebranch删除远程分支"><code>git branch -dr [remote/branch]</code>删除远程分支</h4>
</li>
<li>
<h4 id="git-checkout-b-branch新建一个分支并切换到该分支-2"><code>git checkout -b [branch]</code>新建一个分支，并切换到该分支</h4>
</li>
<li>
<h4 id="git-checkout-branch-name切换到指定分支并更新工作区-2"><code>git checkout [branch-name]</code>切换到指定分支，并更新工作区</h4>
</li>
<li>
<h4 id="git-checkout-切换到上一个分支-2"><code>git checkout -</code>切换到上一个分支</h4>
</li>
<li>
<h4 id="git-push-u-origin-branch-name将本地分支推送到远程分支-2"><code>git push -u origin [branch-name]</code>将本地分支推送到远程分支</h4>
</li>
<li>
<h4 id="git-push-origin-delete-branch-name删除远程分支-2"><code>git push origin --delete [branch-name]</code>删除远程分支</h4>
</li>
</ul>
</li>
<li>
<p><strong>tag</strong></p>
<ul>
<li>
<h4 id="git-tag列出所有tag"><code>git tag</code>列出所有tag</h4>
</li>
<li>
<h4 id="git-tag-tag新建一个tag在当前commit"><code>git tag [tag]</code>新建一个tag在当前commit</h4>
</li>
<li>
<h4 id="git-tag-tag-commit新建一个tag在指定commit"><code>git tag [tag] [commit]</code>新建一个tag在指定commit</h4>
</li>
<li>
<h4 id="git-tag-d-tag删除本地tag"><code>git tag -d [tag]</code>删除本地tag</h4>
</li>
<li>
<h4 id="git-show-tag查看tag信息"><code>git show [tag]</code>查看tag信息</h4>
</li>
<li>
<h4 id="git-checkout-b-branch-tag新建一个分支指向某个tag-2"><code>git checkout -b [branch] [tag]</code>新建一个分支，指向某个tag</h4>
</li>
<li>
<h4 id="git-push-remote-tag提交指定tag-2"><code>git push [remote] [tag]</code>提交指定tag</h4>
</li>
<li>
<h4 id="git-push-remote-tags提交所有tag-2"><code>git push [remote] --tags</code>提交所有tag</h4>
</li>
<li>
<h4 id="git-push-origin-refstagstagname删除远程tag-2"><code>git push origin :refs/tags/[tagName]</code>删除远程tag</h4>
</li>
</ul>
</li>
<li>
<p><strong>log</strong></p>
<ul>
<li>
<h4 id="git-log显示当前分支的版本历史"><code>git log</code>显示当前分支的版本历史</h4>
</li>
</ul>
<pre><code>--stat显示每次commit发生变更的文件
--color显示不同颜色
--graph显示树状
--pretty=format:'%Cred%h%Creset%C(yellow)%d%Creset%s%Cgreen(%cd)%C(bold blue)&lt;%an&gt;%Creset'输出信息格式化
• %Cred: 切换到红色
• %Cgreen: 切换到绿色
• %Cblue: 切换到蓝色
• %Creset: 重设颜色
• %C(...): 制定颜色
• %h: 缩短的commit hash
• %an: 作者名字
• %ae: 作者邮箱
• %cd: 提交日期 (--date= 制定的格式)
• %d: ref名称(tag,分支等信息)
--abbrev-commit显示简短的commit id
--date=relative显示的时间，relative相对时间
</code></pre>
<ul>
<li>
<h4 id="git-log-s-keyword搜索提交历史根据关键词"><code>git log -S [keyword]</code>搜索提交历史，根据关键词</h4>
</li>
<li>
<h4 id="git-log-tag-commit显示某个commit之后的所有变动"><code>git log [tag] [commit]</code>显示某个commit之后的所有变动</h4>
</li>
<li>
<h4 id="git-log-follow-file显示某个文件的版本历史包括文件改名"><code>git log --follow [file]</code>显示某个文件的版本历史，包括文件改名</h4>
</li>
<li>
<h4 id="git-log-p-file显示指定文件相关的每一次diff"><code>git log -p [file]</code>显示指定文件相关的每一次diff</h4>
</li>
<li>
<h4 id="git-whatchanged-file显示某个文件的版本历史包括文件改名"><code>git whatchanged [file]</code>显示某个文件的版本历史，包括文件改名</h4>
</li>
<li>
<h4 id="git-shortlog-sn显示所有提交过的用户按提交次数排序"><code>git shortlog -sn</code>显示所有提交过的用户，按提交次数排序</h4>
</li>
<li>
<h4 id="git-blame-file显示指定文件是什么人在什么时间修改过"><code>git blame [file]</code>显示指定文件是什么人在什么时间修改过</h4>
</li>
<li>
<h4 id="git-show-commit显示某次提交的元数据和内容变化"><code>git show [commit]</code>显示某次提交的元数据和内容变化</h4>
</li>
<li>
<h4 id="git-show-name-only-commit显示某次提交发生变化的文件"><code>git show --name-only [commit]</code>显示某次提交发生变化的文件</h4>
</li>
<li>
<h4 id="git-show-commitfilename显示某次提交时某个文件的内容"><code>git show [commit]:[filename]</code>显示某次提交时，某个文件的内容</h4>
</li>
</ul>
</li>
<li>
<p><strong>diff</strong></p>
<ul>
<li>
<h4 id="git-difftool显示暂存区和工作区的差异"><code>git difftool</code>显示暂存区和工作区的差异</h4>
</li>
<li>
<h4 id="git-difftool-cached-file显示暂存区和上一个commit的差异"><code>git difftool --cached [file]</code>显示暂存区和上一个commit的差异</h4>
</li>
<li>
<h4 id="git-difftool-head显示暂存区与当前分支最新commit之间的差异"><code>git difftool HEAD</code>显示暂存区与当前分支最新commit之间的差异</h4>
</li>
<li>
<h4 id="git-difftool-first-branchsecond-branch显示两个分支或提交之间的差异"><code>git difftool [first-branch]...[second-branch]</code>显示两个分支或提交之间的差异</h4>
</li>
<li>
<h4 id="git-difftool-shortstat-0-day-ago显示今天你写了多少行代码"><code>git difftool --shortstat &quot;@{0 day ago}&quot;</code>显示今天你写了多少行代码</h4>
</li>
<li>
<h4 id="git-diff-file将工作区的修改导出到指定文件"><code>git diff &gt;&gt; [file]</code>将工作区的修改导出到指定文件</h4>
</li>
<li>
<h4 id="git-apply-file将文件中的修改应用到工作区"><code>git apply [file]</code>将文件中的修改应用到工作区</h4>
</li>
</ul>
</li>
<li>
<p><strong>rebase</strong></p>
<ul>
<li>
<h4 id="git-rebase将当前的修改应用到当前分支的最新commit上"><code>git rebase</code>将当前的修改应用到当前分支的最新commit上</h4>
</li>
<li>
<h4 id="git-rebase-branch将当前分支的共同源点后的commit应用到指定分支的所有提交后面相当于分支合并"><code>git rebase [branch]</code>将当前分支的共同源点后的commit应用到指定分支的所有提交后面（相当于分支合并）</h4>
</li>
</ul>
</li>
</ul>
<p><img src="https://chengzhijun0706.github.io//post-images/1561025643702.png" alt=""></p>
<ul>
<li><strong>锦囊妙计</strong>
<ul>
<li>
<h4 id="git-reflog查看所有操作历史配合reset进行时光倒流"><code>git reflog</code>查看所有操作历史，配合reset进行时光倒流</h4>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
</feed>